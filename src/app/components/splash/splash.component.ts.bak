import { ChangeDetectorRef, Component, NgZone, OnInit } from '@angular/core';
import { FormControl } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { combineLatest, map, Observable, shareReplay } from 'rxjs';

import { environment } from '../../../environments/environment';
import { HashSuffixPipe } from '../../pipes/hash-suffix.pipe';
import { AppService } from '../../services/app.service';
import { bitcoinAddressValidator } from '../../validators/bitcoin-address.validator';
import { AverageTimeToBlockPipe } from 'src/app/pipes/average-time-to-block.pipe';

@Component({
  selector: 'app-splash',
  templateUrl: './splash.component.html',
  styleUrls: ['./splash.component.scss']
})
export class SplashComponent implements OnInit {

  public address: FormControl;

  public chartData$: Observable<any>;
  public blockData$: Observable<any>;
  public userAgents$: Observable<any>;
  public highScores$: Observable<any>;
  public uptime$: Observable<string>;

  public chartOptions: any;

  public stratumURL = '';

  public currentDifficulty: string = 'Lade...';
  public currentHashrate: string = 'Lade...';
  public difficultyChange: string = 'Lade...';
  public estimatedDaysUntilAdjustment: string = 'Lade...';

  public commitInfo: string = 'Loading...';

  private info$: Observable<any>;
  private networkInfo: any;

  constructor(
    private appService: AppService,
    private cdr: ChangeDetectorRef,
    private ngZone: NgZone,
    private http: HttpClient
  ) {
    this.info$ = this.appService.getInfo().pipe(shareReplay({ refCount: true, bufferSize: 1 }));

    if (environment.STRATUM_URL.length > 1) {
      this.stratumURL = environment.STRATUM_URL;
    } else {
      this.stratumURL = window.location.hostname + ':3333';
    }

    this.blockData$ = this.info$.pipe(map(info => info.blockData));
    this.userAgents$ = this.info$.pipe(map(info => info.userAgents));
    this.highScores$ = this.info$.pipe(map(info => info.highScores));
    this.uptime$ = this.info$.pipe(map(info => info.uptime));

    this.chartData$ = combineLatest([this.appService.getInfoChart(), this.appService.getNetworkInfo()]).pipe(
      map(([chartData, networkInfo]) => {
        this.networkInfo = networkInfo;
        return {
          labels: chartData.map((d: any) => d.label),
          datasets: [
            {
              label: 'Public-Pool Hashrate',
              data: chartData.map((d: any) => d.data),
              fill: false,
              backgroundColor: documentStyle.getPropertyValue('--primary-color'),
              borderColor: documentStyle.getPropertyValue('--primary-color'),
              tension: .4,
              pointRadius: 1,
              borderWidth: 1
            }
          ]
        }
      })
    );

    this.address = new FormControl(null, bitcoinAddressValidator());

    const documentStyle = getComputedStyle(document.documentElement);
    const textColor = documentStyle.getPropertyValue('--text-color');
    const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');
    const surfaceBorder = documentStyle.getPropertyValue('--surface-border');

    this.chartOptions = {
      maintainAspectRatio: false,
      plugins: {
        legend: {
          labels: {
            color: textColor
          }
        }
      },
      scales: {
        x: {
          type: 'time',
          time: {
            unit: 'day'
          },
          ticks: {
            color: textColorSecondary
          },
          grid: {
            color: surfaceBorder,
            drawBorder: false,
            display: true
          }
        },
        y: {
          ticks: {
            color: textColorSecondary,
            callback: (value: number) => {
              return HashSuffixPipe.transform(value) + " - " + AverageTimeToBlockPipe.transform(value, this.networkInfo.difficulty);
            }
          },
          grid: {
            color: surfaceBorder,
            drawBorder: false
          },
          type: 'logarithmic',
        }
      }
    };
  }

  ngOnInit(): void {
    this.fetchPoolStats();
    this.fetchDifficultyAdjustment();
    this.fetchCommitInfo();
  }

  async fetchPoolStats() {
    try {
      const response = await fetch("https://mempool.space/api/v1/mining/hashrate/3d");
      const data = await response.json();

      this.ngZone.run(() => {
        this.currentDifficulty = (data.currentDifficulty / 1e12).toFixed(2);
        this.currentHashrate = (data.currentHashrate / 1e12).toFixed(2);
      });

    } catch (error) {
      console.error("Fehler beim Abrufen der Pool-Statistiken:", error);
      this.ngZone.run(() => {
        this.currentDifficulty = "Fehler";
        this.currentHashrate = "Fehler";
      });
    }
    this.cdr.detectChanges();
  }

  async fetchDifficultyAdjustment() {
    try {
      const response = await fetch("https://mempool.space/api/v1/difficulty-adjustment");
      const data = await response.json();

      this.ngZone.run(() => {
        this.difficultyChange = data.difficultyChange.toFixed(2);
        const daysUntilAdjustment = data.remainingTime / (1000 * 60 * 60 * 24);
        this.estimatedDaysUntilAdjustment = daysUntilAdjustment.toFixed(2);
      });

    } catch (error) {
      console.error("Fehler beim Abrufen der Schwierigkeitsanpassungsdaten:", error);
      this.ngZone.run(() => {
        this.difficultyChange = "Fehler";
        this.estimatedDaysUntilAdjustment = "Fehler";
      });
    }
    this.cdr.detectChanges();
  }

  fetchCommitInfo(): void {
    this.http.get('/commit.txt', { responseType: 'text' }).subscribe({
      next: (data) => {
        this.commitInfo = data;
        this.cdr.detectChanges();
      },
      error: () => {
        this.commitInfo = 'Version info unavailable';
        this.cdr.detectChanges();
      }
    });
  }
}

